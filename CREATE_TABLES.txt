-- Tables Setup:
-- Users keep track of user and authentication information
-- OAuthInfos keeps track of all OAuth tokens and IDs for authentication through OAuth
-- Tournaments keep track of their creator, title and description
-- Matches keep track of when they take place, what tournament they are in and who won
-- TournamentParticipants is a join table to keep track of all the users participating in a tournament
-- MatchParticipants is similar to TournamentParticipants but instead keeps track of all users in a match

-- Flow of tables:
-- A user signs up using their own credentials or OAuth
-- A signed in user can then make a tournament
-- The tournament sets its creator ID to that user
-- Other signed in users can JOIN the tournament and are added to TournamentParticipants
-- The creator of the tournament can then add matches to the tournament
-- These matches can then have participants
-- When adding users to the matches, the creator will ONLY see users attending the current tournament
-- This way a user who is not attending the tournament can not randomly join a match
CREATE TABLE Users (
    UserId INT IDENTITY(1,1) PRIMARY KEY,
    Username VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    HashedPassword VARBINARY(64),
    Salt VARBINARY(MAX)
);

CREATE TABLE OAuthInfos (
    UserId INT PRIMARY KEY,
    OAuthProvider VARCHAR(50),
    OAuthProviderId VARCHAR(100),
    AccessToken VARCHAR(1000),
    RefreshToken VARCHAR(1000),
    AccessTokenExpiration DATETIME,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

CREATE TABLE Categories (
    CategoryId INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100) NOT NULL
);

CREATE TABLE Tournaments (
    TournamentId INT IDENTITY(1,1) PRIMARY KEY,
    Title VARCHAR(100) NOT NULL,
    Description TEXT,
    CreatorId INT NOT NULL,
    CategoryId INT DEFAULT 1,
    AcceptingParticipants BIT DEFAULT 1,
    TournamentStart DATETIME,
    FOREIGN KEY (CreatorId) REFERENCES Users(UserId),
    FOREIGN KEY (CategoryId) REFERENCES Categories(CategoryId)
);

CREATE TABLE Matches (
    MatchId INT IDENTITY(1,1) PRIMARY KEY,
    TournamentId INT NOT NULL,
    MatchTitle VARCHAR(100),
    MatchStart DATETIME DEFAULT CURRENT_TIMESTAMP,
    WinnerId INT,
    WinMatch INT,
    LoseMatch INT,
    StartingMatch BIT DEFAULT 1,
    FOREIGN KEY (TournamentId) REFERENCES Tournaments(TournamentId) ON DELETE CASCADE,
    FOREIGN KEY (WinnerId) REFERENCES Users(UserId),
    FOREIGN KEY (WinMatch) REFERENCES Matches(MatchId),
    FOREIGN KEY (LoseMatch) REFERENCES Matches(MatchId)
);

CREATE TABLE TournamentParticipants (
    TournamentParticipantId INT IDENTITY(1,1) PRIMARY KEY,
    TournamentId INT NOT NULL,
    UserId INT NOT NULL,
    FOREIGN KEY (TournamentId) REFERENCES Tournaments(TournamentId) ON DELETE CASCADE,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

CREATE TABLE MatchParticipants (
    MatchParticipantId INT IDENTITY(1,1) PRIMARY KEY,
    MatchId INT NOT NULL,
    UserId INT NOT NULL,
    Score INT DEFAULT 0,
    FOREIGN KEY (MatchId) REFERENCES Matches(MatchId) ON DELETE CASCADE,
    FOREIGN KEY (UserId) REFERENCES Users(UserId)
);

CREATE INDEX IX_Users_Email ON Users (Email);
CREATE INDEX IX_TournamentParticipants_UserId ON TournamentParticipants (UserId);
CREATE INDEX IX_TournamentParticipants_TournamentId ON TournamentParticipants (TournamentId);
CREATE INDEX IX_Matches_TournamentId ON Matches (TournamentId);
CREATE INDEX IX_Tournaments_Title ON Tournaments (Title);
CREATE INDEX IX_Tournaments_CategoryId ON Tournaments (CategoryId);
CREATE INDEX IX_MatchParticipants_MatchId ON MatchParticipants (MatchId);
CREATE INDEX IX_OAuthInfo_UserId ON OAuthInfos (UserId);
CREATE INDEX IX_Matches_StartingMatch ON Matches (StartingMatch);

-- When a match is deleted, update matches that reference it
CREATE TRIGGER UpdateMatchesOnDelete
ON Matches
AFTER DELETE
AS
BEGIN
    DECLARE @DeletedMatchId INT = (SELECT MatchId FROM deleted);
	DECLARE @DeletedWinMatchId INT = (SELECT WinMatch FROM deleted);
    DECLARE @DeletedLoseMatchId INT = (SELECT LoseMatch FROM deleted);

    -- IF deleted match had a win/lose match change reference to that (can be null)
    UPDATE Matches
    SET WinMatch = CASE WHEN WinMatch = @DeletedMatchId THEN @DeletedWinMatchId ELSE WinMatch END,
        LoseMatch = CASE WHEN LoseMatch = @DeletedMatchId THEN @DeletedLoseMatchId ELSE LoseMatch END
    WHERE WinMatch = @DeletedMatchId OR LoseMatch = @DeletedMatchId;
END;


